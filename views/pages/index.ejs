<div class="mt-20 mb-4 flex flex-col items-center justify-center mx-auto lg:py-0 container">
    <div id="song-table" class="container base-container text-black dark:text-white p-0 space-y-0">
        <div class="w-full p-1 grid grid-cols-main-list text-xl font-medium bg-gray-100  dark:bg-lighter-main-900">
            <div class="p-1"></div>
            <div class="p-1"></div>
            <div class="p-1">Anime</div>
            <div class="p-1">Song</div>
            <div class="p-1">Rating</div>
            <div class="p-1">Type</div>
        </div>
    </div>
</div>
<script>
    const urlParams = new URLSearchParams(window.location.search);

    const count = 50;
    let start = 0;

    function onScroll() {
        const threshold = 300;
        if (window.scrollY + window.innerHeight + threshold >= document.body.scrollHeight) {
            document.removeEventListener("scroll", onScroll);
            loadContent().then(() => {
                document.addEventListener("scroll", onScroll);
            });
        }
    }

    function loadContent() {
        return new Promise((res, rej) => {
            fetch("/templates/song-table-row.ejs").then((r) => {
                let ost_search_input = `{
                                count: ${count}
                                start: ${start}
                            }`;

                if (urlParams.has("expression")) {
                    ost_search_input = `{
                                count: ${count}
                                start: ${start}
                                expression: "*${urlParams.get("expression")}*"
                            }`;
                }

                r.text().then((template) => {
                    graphqlQuery(`
                        {
                            osts(input: ${ost_search_input}) {
                                id
                                name
                                alternate_name
                                rating
                                relations {
                                    show {
                                        main_title
                                        alternative_title
                                        medium
                                    }
                                    type
                                    number
                                }
                            }
                        }
                    `).then((r) => {
                        let index = start + 1;
                        let table = document.getElementById("song-table");
                        for (ost of r.data.osts) {
                            let medium = ost.relations[0]?.show?.medium
                            table.innerHTML += ejs.render(template, {
                                id: ost.id,
                                index: index++,
                                medium: medium,
                                main_title: ost.relations[0]?.show?.main_title,
                                alternative_title: ost.relations[0]?.show?.alternative_title ? ost.relations[0]?.show?.alternative_title.split("|;|")[0] : "",
                                name: ost.name,
                                alternate_name: ost.alternate_name,
                                rating: ost.rating ? (ost.rating / 10.0).toFixed(2) : "Not Rated",
                                type: `${ost.relations[0]?.type} ${ost.relations[0]?.number}`
                            });
                        }

                        start += count;

                        if (r.data.osts.length === 0)
                            return rej();
                        
                        res();
                    })
                })
            })
        })
    }

    loadContent().then(() => {
        document.addEventListener("scroll", onScroll);
    });
</script>