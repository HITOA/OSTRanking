<div class="grid place-content-center h-screen w-full">
    <div class="base-container text-white max-w-3xl">
        <h1 class="text-white text-medium font-bold leading-tight text-2xl">Request Song</h1>
        <div id="notification" class="base-notification my-4">
            MESSAGE
        </div>
        <div class="flex mt-2">
            <div class="mr-1 w-full">
                <label class="base-label flex">Name<p class="text-red-500">&nbsp;*</p></label>
                <input id="name" type="text" class="base-input" autocomplete="off">
            </div>
            <div class="ml-1 w-full">
                <label class="base-label">Alternate name</label>
                <input id="alternate-name" type="text" class="base-input" autocomplete="off">
            </div>
        </div>
        <div class="flex">
            <div class="mr-1 w-full">
                <label class="base-label flex">Length (mm:ss)<p class="text-red-500">&nbsp;*</p></label>
                <input id="length" type="text" class="base-input" autocomplete="off">
            </div>
            <div class="ml-1 w-full">
                <label class="base-label">Short length (TV size)</label>
                <input id="short-length" type="text" class="base-input" autocomplete="off">
            </div>
        </div>
        <h1 class="text-white text-medium font-bold leading-tight text-xl mt-4">Relations</h1>
        <div id="relation-container">

        </div>
        <div class="flex m-1 mx-2 p-1 md:p-2 mt-2 border-t rounded-b border-main-600">
            <h1 class="w-3/6 p-2 font-bold">Show ID</h1>
            <input id="show-id" class="base-input mr-2" value="" autocomplete="off">
            <button onclick="addRelation()" class="base-btn mx-2">Add Show</button>
        </div>
        <button onclick="submitSongRequest()" class="base-btn p-1">Submit</button>
    </div>
</div>
<script src="/scripts/time-utils.js"></script>
<script src="/scripts/fxp.min.js"></script>
<script src="/scripts/annapi.js"></script>
<script>
    let relations = {};
    let c = 0;

    function loadEjsTemplateFromFile(uri) {
        return new Promise((res, rej) => {
            fetch(uri).then((r) => {
                r.text().then((t) => {
                    res(t);
                })
            }).catch((err) => {
                rej(err);
            })
        })
    }

    function addRelation() {
        let show_id = parseInt(document.getElementById("show-id").value);
        if (!show_id)
            return;

        let id = c++;

        let relation_container = document.getElementById("relation-container");
        ann.getAnimeData(show_id).then((show_data) => {
            loadEjsTemplateFromFile("/templates/editable-relation.ejs").then((r)=>{
                relation_container.insertAdjacentHTML("beforeend", ejs.render(r, {
                    id: id,
                    show_id: show_id,
                    medium: show_data.medium,
                    main_title: show_data.main_title,
                    alternative_title: show_data.alternative_title.split("|;|")[0]
                }));

                relations[id] = {
                    show: {
                        id: show_id,
                        large: show_data.large,
                        medium: show_data.medium,
                        main_title: show_data.main_title,
                        alternative_title: show_data.alternative_title
                    },
                    type: "Opening",
                    number: 1
                };
            });
        })
    }

    function removeRelation(id) {
        if (!relations[id])
            return

        let element = document.getElementById(`relation-${id}`);
        element.parentElement.removeChild(element);
        delete relations[id];
    }

    function updateRelationType(id, element) {
        if (!relations[id])
            return
        
        relations[id].type = element.value;
    }

    function updateRelationNumber(id, element) {
        if (!relations[id])
            return
        
        relations[id].number = parseInt(element.value);
    }

    function notify(msg, success) {
        const notification = document.getElementById("notification");
        notification.innerHTML = msg;

        if (success === true) {
            notification.classList.remove("base-notification-wrong");
            notification.classList.add("base-notification-right");
        } else {
            notification.classList.remove("base-notification-right");
            notification.classList.add("base-notification-wrong");
        }
    }

    function nullIfEvaluateToFalse(f) {
        return f ? f : null;
    }

    function submitSongRequest() {
        let data = {
            name: document.getElementById("name").value,
            alternate_name: nullIfEvaluateToFalse(document.getElementById("alternate-name").value),
            length: document.getElementById("length").value,
            short_length: nullIfEvaluateToFalse(document.getElementById("short-length").value)
        };

        if (!data.name) {
            notify("Song name isn't optional!", false);
            return;
        }
        if (!data.length) {
            notify("Song length isn't optional!", false);
            return;
        }

        data.length = mmssToDate(data.length);
        data.short_length = mmssToDate(data.short_length);

        if (data.length === null) {
            notify("Song length isn't valid.", false);
            return;
        }
        if (data.short_length)
            data.short_length = data.short_length.getMinutes() * 60 + data.short_length.getSeconds();

        data.length = data.length.getMinutes() * 60 + data.length.getSeconds();

        data.relations = [];

        for (const [key, value] of Object.entries(relations)) {
            data.relations.push(value);
        }

        if (!data.relations.length) {
            notify("There should be at least one relation.", false);
            return;
        }

        graphqlQuery(`
        mutation($data: String!) {
            add_community_action(input: {
                type: OstAdd
                data: $data
            }) {
                id
            }
        }`, {
            data: JSON.stringify(data)
        }).then((r) => {
            notify("Song request submited successfully. Redirecting...", true);
            setTimeout(() => {
                location.href = `/community/preview/${r.data.add_community_action.id}`
            }, 2000);
        })
    }
</script>