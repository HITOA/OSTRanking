
<div class="flex gap-x-8 mx-auto lg:py-0 container text-white mb-4">
    <div id="add-entry-container" class="mt-20 w-2/3 flex flex-col gap-y-4 items-center lg:py-0 container">
    </div>
    <div id="edit-entry-container" class="mt-20 w-1/3 flex flex-col gap-y-4 items-center lg:py-0 container">
    </div>
</div>
<script src="/scripts/time-utils.js"></script>
<script>
    const count = 20;
    let start = 0;

    let la = 1;
    let le = 1;

    function onScroll() {
        const threshold = 300;
        if (window.scrollY + window.innerHeight + threshold >= document.body.scrollHeight) {
            document.removeEventListener("scroll", onScroll);
            loadContent().then(() => {
                document.addEventListener("scroll", onScroll);
            });
        }
    }

    function loadEjsTemplateFromFile(uri) {
        return new Promise((res, rej) => {
            fetch(uri).then((r) => {
                r.text().then((t) => {
                    res(t);
                })
            }).catch((err) => {
                rej(err);
            })
        })
    }
    
    function loadContent() {
        return new Promise(async (res, rej) => {
            if (la + le === 0)
                return res();
            
            await loadEjsTemplateFromFile("/templates/action-ost-add-entry.ejs").then((template) => {
                graphqlQuery(`
                    query($start: Int, $count: Int) {
                        actions(input: {
                            editOnly: false
                            start: $start
                            count: $count
                        }) {
                            id
                            data
                            status
                            creation_date
                            user {
                                name
                            }
                        }
                    }`, {
                        start: start,
                        count: count
                    }).then((r) => {
                        let add_entry_container = document.getElementById("add-entry-container");
                        la = r.data.actions.length;

                        for (let action of r.data.actions) {
                            let data = JSON.parse(action.data);
                            add_entry_container.insertAdjacentHTML("beforeend", ejs.render(template, {
                                id: action.id,
                                username: action.user.name,
                                since: timeSince(new Date(parseInt(action.creation_date))),
                                song_name: data.name,
                                action_status: action.status,
                                show_thumbnail: data.relations[0].show.medium,
                                song_show_relation: `${data.relations[0].type} ${data.relations[0].number}`,
                                show_name: data.relations[0].show.main_title
                            }));
                        }
                    })
            });

            await loadEjsTemplateFromFile("/templates/action-ost-edit-entry.ejs").then((template) => {
                graphqlQuery(`
                    query($start: Int, $count: Int) {
                        actions(input: {
                            editOnly: true
                            start: $start
                            count: $count
                        }) {
                            id
                            data
                            status
                            type
                            creation_date
                            user {
                                name
                            }
                        }
                    }`, {
                        start: start,
                        count: count
                    }).then(async (r) => {
                        let edit_entry_container = document.getElementById("edit-entry-container");
                        le = r.data.actions.length;

                        for (let action of r.data.actions) {
                            let data = JSON.parse(action.data);
                            await graphqlQuery(`
                            query($id: ID) {
                                ost(id: $id) {
                                    name
                                }
                            }`, {
                                id: data.ost_id
                            }).then(async (ost_data) => {
                                let edit_text;

                                switch (action.type) {
                                    case "EditExternalLinks":
                                        edit_text = "external links";
                                        break;
                                    case "EditRelations":
                                        edit_text = "relations";
                                        break;
                                    case "EditSongInformation":
                                        edit_text = "song information";
                                        break;
                                    default:
                                        edit_text = action.type;
                                        break;
                                }

                                edit_entry_container.insertAdjacentHTML("beforeend", ejs.render(template, {
                                    id: action.id,
                                    username: action.user.name,
                                    since: timeSince(new Date(parseInt(action.creation_date))),
                                    action_status: action.status,
                                    song_name: ost_data.data.ost?.name,
                                    edit_text: `Requested to update ${edit_text} on song`
                                }));
                            })
                        }

                        res();
                    })
            });

            start += count;
        });
    }

    loadContent().then(() => {
        document.addEventListener("scroll", onScroll);
    });
</script>