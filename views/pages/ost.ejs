<div class="mt-20 flex flex-col items-center justify-center mx-auto lg:py-0 container">
    <div class="container base-container grid grid-cols-ost-list p-2 space-y-2">
        <div class="p-2">
            <iframe id="youtube-player" class="hidden w-full aspect-square md:aspect-video" loading="lazy" src=""></iframe>
        </div>
        <div class="rounded-lg bg-main-700 mx-2 p-2 flex flex-col">
            <div class="h-full"></div>
            <h1 id="anime-score" class="text-black dark:text-white font-medium text-2xl">Score: 50</h1>
            <div class="flex">
                <% for(var i = 0; i < 10; ++i) { %>
                    <div onclick="setScore(<%- (i + 1) * 10 %>)" class="pointer-cursor flex stroke-main-950 fill-main-600 hover:scale-125 transition transition-scale">
                        <svg id="halfheart-<%- i %>" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-10 h-10">
                            <path d="M11.645 20.91l-.007-.003-.022-.012a15.247 15.247 0 01-.383-.218 25.18 25.18 0 01-4.244-3.17C4.688 15.36 2.25 12.174 2.25 8.25 2.25 5.322 4.714 3 7.688 3A5.5 5.5 0 0112 5.052 5.5 5.5 0 0116.313 3c2.973 0 5.437 2.322 5.437 5.25 0 3.925-2.438 7.111-4.739 9.256a25.175 25.175 0 01-4.244 3.17 15.247 15.247 0 01-.383.219l-.022.012-.007.004-.003.001a.752.752 0 01-.704 0l-.003-.001z"/>
                        </svg>     
                    </div>
                <% } %>
            </div>
        </div>
        <div class="rounded-lg bg-main-700 p-2 flex flex-col">
            <div class="h-full"></div>
            <h1 id="anime-average" class="text-black dark:text-white font-medium text-2xl">Score: 50</h1>
            <h1 id="anime-count" class="text-black dark:text-white font-medium text-xl">50 users.</h1>
        </div>
        <div class="flex flex-col rounded-lg bg-main-700 p-2">
            <div class="flex flex-col divide-y my-2">
                <h1 class="text-black dark:text-white font-medium text-2xl">Title(s)</h1>
                <div class="flex flex-col">
                    <h1 class="text-black dark:text-white text-xl">Native: <a id="song-title" class="hover:underline" href=""></a></h1>
                    <h1 class="text-black dark:text-white text-xl hidden">Alternative: <a id="song-alternate-title" class="hover:underline" href=""></a></h1>
                </div>
            </div>
            <div class="flex flex-col divide-y my-2">
                <h1 class="text-black dark:text-white font-medium text-2xl">Infomation</h1>
                <div class="flex flex-col">
                    <h1 id="song-length" class="text-black dark:text-white text-xl">Length:</h1>
                    <h1 id="song-short-length" class="text-black dark:text-white text-xl">Short length:</h1>
                </div>
            </div>
        </div>
        <div id="relation-container" class="rounded-lg bg-main-700 mx-2 p-2">
            <div data-type="template" class="hidden w-full grid grid-cols-ost-list items-center bg-main-600 hover:bg-lighter-main-600 transition transition-colors p-2 rounded-lg">
                <img class="border-lg aspect-square object-cover w-24 rounded-lg p-1" src="">
                <div>
                    <h1 id="relation-show-name" class="text-xl font-medium text-black dark:text-white">-</h1>
                    <h1 id="relation-show-alt-name"  class="text-xl font-medium text-main-300">-</h1>
                </div>
                <div>
                    <h1 id="relation-show-type" class="text-xl font-medium text-black dark:text-white">-</h1>
                </div>
            </div>
        </div>
        <div class="rounded-lg bg-main-700 p-2">
        </div>
    </div>
</div>
<script>
    const ost_id = <%- ost_id %>;
</script>
<script>
    function setHeartsColor(idx) {
        for (var i = 0; i < 10; ++i) {
            const halfheartElm = document.getElementById(`halfheart-${i}`);

            if (i < idx) {
                halfheartElm.classList.add("fill-red-500");
            } else {
                halfheartElm.classList.remove("fill-red-500");
            }
        }
    }

    function setScore(score, send = true) {
        setHeartsColor(Math.floor(score / 10));
        document.getElementById("anime-score").innerHTML = score ? score : "Not rated.";

        if (!send)
            return;

        setOstScore(ost_id, score);
    }
</script>
<script>
    //Source : https://stackoverflow.com/a/8260383
    function youtubeParser(url){
        var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
        var match = url.match(regExp);
        return (match&&match[7].length==11)? match[7] : false;
    }

    function setPlayer(url) {
        if ((id = youtubeParser(url))) {
            var ytbPlayer = document.getElementById("youtube-player");
            ytbPlayer.src = `https://www.youtube.com/embed/${id}`;
            ytbPlayer.classList.remove("hidden");
            return;
        }
    }

    function setOstInformation(ost) {
        console.log(ost);

        setPlayer(ost.url);

        const songTitle = document.getElementById("song-title");
        const songAltTitle = document.getElementById("song-alternate-title");
        songTitle.href = ost.url;
        songAltTitle.href = ost.url;
        
        songTitle.innerHTML = ost.name;
        songAltTitle.innerHTML = ost.alternate_name;

        if (ost.alternate_name)
            songAltTitle.parentElement.classList.remove("hidden");

        document.getElementById("song-length").innerHTML = `Length: ${new Date(ost.length * 1000).toISOString().substr(14, 5)}`;
        document.getElementById("song-short-length").innerHTML = ost.short_length ? `Short length: ${new Date(ost.short_length * 1000).toISOString().substr(14, 5)}` : "Short length : None";
        
        document.getElementById("anime-average").innerHTML = `Rating: ${ost.score_count ? ost.score_acc / ost.score_count : "Not rated."}`;
        document.getElementById("anime-count").innerHTML = `${ost.score_count} users.`;
    }

    function addOstRelation(relation) {
        const relationElm = document.querySelector("div[data-type='template']").cloneNode(true);
        const relationContainer = document.getElementById("relation-container");

        getAnimeInfoById(relation.show_id).then((r) => {
            relationElm.querySelector("img").src = r.data.Media.coverImage.large;
            relationElm.querySelector("#relation-show-name").innerHTML = r.data.Media.title.native;
            relationElm.querySelector("#relation-show-alt-name").innerHTML = r.data.Media.title.userPreferred;
        })

        var type = "";
        switch (relation.type) {
            case 0:
                type = `Opening ${relation.num}`;
                break;
            case 1:
                type = `Ending ${relation.num}`;
                break;
            case 2:
                type = `Insert ${relation.num}`;
                break;
        }

        relationElm.querySelector("#relation-show-type").innerHTML = type;

        relationElm.classList.remove("hidden");

        relationContainer.appendChild(relationElm);
    }

    getOstById(ost_id).then((ost) => {
        setOstInformation(ost);
        getOstScore(ost.id).then((score) => {
            setScore(score.score ? score.score : 50, false);
        }).catch((r) => {
            console.log(r);
        })
    }).catch((r) => {
        console.log(r);
    })

    getOstRelationsById(ost_id).then((relations) => {
        for (var i = 0; i < relations.length; ++i) {
            addOstRelation(relations[i]);
        }
    }).catch((r) => {
        console.log(r);
    })
</script>